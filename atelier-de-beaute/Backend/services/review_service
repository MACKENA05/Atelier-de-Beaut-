from Backend.models.review import Review
from Backend.models.product import Product
from Backend.models.user import User
from Backend.app import db
from sqlalchemy.orm import joinedload
from datetime import datetime, timezone

class Reviewservice:
    @staticmethod
    def create_review(data):
        if not all(key in data for key in ['product_id', 'user_id', 'rating']):
            raise ValueError('Missing required fields')
        
        if not (1 <= data['rating'] <= 5):
            raise ValueError('Rating must be between 1 and 5')
        
        if not Product.query.get(data['product_id']):
            raise ValueError('Product not found')
        if not User.query.get(data['user_id']):
            raise ValueError('User not found')
        
        review = Review(
            product_id=data['product_id'],
            user_id=data['user_id'],
            rating=data['rating'],
            comment=data.get('comment', ''),
            is_featured=data.get('is_featured', False)
        )
        
        db.session.add(review)
        db.session.commit()
        return review

    @staticmethod
    def get_reviews(product_id=None, eager_load=False):
        query = Review.query
        if eager_load:
            query = query.options(joinedload(Review.user))
        if product_id:
            query = query.filter_by(product_id=product_id)
        return query.all()

    @staticmethod
    def get_filtered_reviews(product_id=None, user_id=None, rating=None, is_featured=None, eager_load=False):
        query = Review.query
        if eager_load:
            query = query.options(joinedload(Review.user), joinedload(Review.product))
        if product_id:
            query = query.filter_by(product_id=product_id)
        if user_id:
            query = query.filter_by(user_id=user_id)
        if rating is not None:
            query = query.filter_by(rating=rating)
        if is_featured is not None:
            query = query.filter_by(is_featured=is_featured)
        return query.all()

    @staticmethod
    def get_review(review_id):
        return Review.query.get(review_id)

    @staticmethod
    def update_review(review_id, data):
        review = Review.query.get(review_id)
        if not review:
            raise ValueError('Review not found')
        
        if 'rating' in data:
            if not (1 <= data['rating'] <= 5):
                raise ValueError('Rating must be between 1 and 5')
            review.rating = data['rating']
        
        if 'comment' in data:
            review.comment = data['comment']
        
        if 'is_featured' in data:
            review.is_featured = data['is_featured']
        
        db.session.commit()
        return review

    @staticmethod
    def delete_review(review_id):
        review = Review.query.get(review_id)
        if not review:
            raise ValueError('Review not found')
        db.session.delete(review)
        db.session.commit()

    @staticmethod
    def toggle_featured(review_id):
        review = Review.query.get(review_id)
        if not review:
            raise ValueError('Review not found')
        review.is_featured = not review.is_featured
        db.session.commit()
        return review

    @staticmethod
    def get_featured_reviews(product_id=None, eager_load=False):
        query = Review.query.filter_by(is_featured=True)
        if eager_load:
            query = query.options(joinedload(Review.user))
        if product_id:
            query = query.filter_by(product_id=product_id)
        return query.all()